<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org/DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.admin.mapper.AnalyzeMapper">

	<!-- 연간 카테고리별 통계 -->
	<select id="categoryYearAnalyze" parameterType="String"
		resultType="ItemDTO">
		SELECT i.categoryKey, sum(od.price*od.cnt) AS salesSum,
		SUM(od.cnt) AS
		salesCnt
		FROM orderDetaiL od
		INNER JOIN item i ON i.itemKey=od.itemKey
		INNER JOIN totalOrder o ON o.orderKey=od.orderKey WHERE
		<![CDATA[
		DATE_FORMAT(o.rdate, '%Y-%m-%d') >= DATE_FORMAT( '${year}-01-01','%Y-%m-%d') AND 
		DATE_FORMAT(o.rdate, '%Y-%m-%d') <= DATE_FORMAT('${year}-12-31', '%Y-%m-%d')
		]]>
		AND o.status NOT LIKE 'F'
		GROUP BY i.categoryKey
		ORDER BY categoryKey
		ASC
	</select>
	<!-- 주어진 년도에 해당되는 판매액, 배송건, 구매확정률에 대한 데이터 -->
	<select id="dashBoardCardYear" resultType="OrderDTO">
		SELECT SUM(price) AS "price",
		(SELECT COUNT(orderKey) FROM totalOrder WHERE rdate BETWEEN '${year}-01-01
		00:00:00' AND '${year}-12-31 23:59:59' AND (status LIKE 'D' OR status
		LIKE 'S')) AS "itemCnt",
		(SELECT COUNT(orderKey) FROM totalOrder WHERE rdate BETWEEN '${year}-01-01
		00:00:00' AND '${year}-12-31 23:59:59' AND status NOT LIKE 'F' ) AS
		"status",
		(SELECT COUNT(orderKey) FROM totalOrder WHERE rdate BETWEEN '${year}-01-01
		00:00:00' AND '${year}-12-31 23:59:59' AND status LIKE 'F') AS
		"refund",
		(SELECT SUM(od.cnt) FROM totalOrder t JOIN orderDetail od ON od.orderKey =
		t.orderKey WHERE t.rdate BETWEEN '${year}-01-01 00:00:00' AND
		'${year}-12-31 23:59:59' AND status NOT LIKE 'F') AS "totalSales"
		FROM totalOrder
		WHERE rdate BETWEEN '${year}-01-01 00:00:00' AND '${year}-12-31 23:59:59'
		AND status NOT LIKE 'F'
	</select>

	<!-- 주어진 년도, 월에 해당되는 판매액, 배송건, 구매확정률에 대한 데이터 -->
	<select id="dashBoardCardMonth" resultType="OrderDTO">
		SELECT SUM(price) AS "price",
		(SELECT COUNT(orderKey) FROM totalOrder WHERE rdate BETWEEN
		'${year}-${month}-01 00:00:00' AND '${year}-${month}-31 23:59:59' AND
		(status LIKE 'D' OR status LIKE 'S')) AS "itemCnt",
		(SELECT COUNT(orderKey) FROM totalOrder WHERE rdate BETWEEN
		'${year}-${month}-01 00:00:00' AND '${year}-${month}-31 23:59:59' AND
		status NOT LIKE 'F' ) AS "status",
		(SELECT COUNT(orderKey) FROM totalOrder WHERE rdate BETWEEN
		'${year}-${month}-01 00:00:00' AND '${year}-${month}-31 23:59:59' AND
		status LIKE 'F') AS "refund",
		(SELECT SUM(od.cnt) FROM totalOrder t JOIN orderDetail od ON od.orderKey =
		t.orderKey WHERE rdate BETWEEN '${year}-${month}-01 00:00:00' AND
		'${year}-${month}-31 23:59:59' AND status NOT LIKE 'F') AS
		"totalSales"
		FROM totalOrder
		WHERE rdate BETWEEN '${year}-${month}-01 00:00:00' AND '${year}-${month}-31
		23:59:59' AND status NOT LIKE 'F'
	</select>

	<!-- 주어진 년도, 월, 일 에 해당되는 판매액, 배송건, 구매확정률에 대한 데이터 -->
	<select id="dashBoardCardDay" resultType="OrderDTO">
		SELECT SUM(price) AS "price",
		(SELECT COUNT(orderKey) FROM totalOrder WHERE rdate BETWEEN
		'${year}-${month}-${day} 00:00:00' AND '${year}-${month}-${day}
		23:59:59' AND (status LIKE 'D' OR status LIKE 'S')) AS "itemCnt",
		(SELECT COUNT(orderKey) FROM totalOrder WHERE rdate BETWEEN
		'${year}-${month}-${day} 00:00:00' AND '${year}-${month}-${day}
		23:59:59' AND status NOT LIKE 'F' ) AS "status",
		(SELECT COUNT(orderKey) FROM totalOrder WHERE rdate BETWEEN
		'${year}-${month}-${day} 00:00:00' AND '${year}-${month}-${day}
		23:59:59' AND status LIKE 'F') AS "refund",
		(SELECT SUM(od.cnt) FROM totalOrder t JOIN orderDetail od ON od.orderKey =
		t.orderKey WHERE rdate BETWEEN '${year}-${month}-${day} 00:00:00' AND
		'${year}-${month}-${day} 23:59:59' AND status NOT LIKE 'F') AS
		"totalSales"
		FROM totalOrder
		WHERE rdate BETWEEN '${year}-${month}-${day} 00:00:00' AND
		'${year}-${month}-${day} 23:59:59' AND status NOT LIKE 'F';
	</select>

	<!-- 월간 카테고리별 통계 -->
	<select id="categoryMonthAnalyze" parameterType="String"
		resultType="ItemDTO">
		SELECT i.categoryKey, sum(od.price*od.cnt) AS salesSum,
		SUM(od.cnt) AS
		salesCnt
		FROM orderDetaiL od
		INNER JOIN item i ON i.itemKey=od.itemKey
		INNER JOIN totalOrder o ON o.orderKey=od.orderKey WHERE
		<![CDATA[
		DATE_FORMAT(o.rdate, '%Y-%m-%d') >= DATE_FORMAT( '${year}-${month}-01','%Y-%m-%d') AND 
		DATE_FORMAT(o.rdate, '%Y-%m-%d') <= DATE_FORMAT('${year}-${month}-31', '%Y-%m-%d')
		]]>
		AND o.status NOT LIKE 'F'
		GROUP BY i.categoryKey
		ORDER BY categoryKey
		ASC
	</select>

	<!-- 일간 카테고리별 통계 -->
	<select id="categoryDayAnalyze" parameterType="String"
		resultType="ItemDTO">
		SELECT i.categoryKey, sum(od.price*od.cnt) AS salesSum,
		SUM(od.cnt) AS
		salesCnt
		FROM orderDetaiL od
		INNER JOIN item i ON i.itemKey=od.itemKey
		INNER JOIN totalOrder o ON o.orderKey=od.orderKey WHERE
		<![CDATA[
		DATE_FORMAT(o.rdate, '%Y-%m-%d') = DATE_FORMAT( '${year}-${month}-${day}','%Y-%m-%d')
		]]>
		AND o.status NOT LIKE 'F'
		GROUP BY i.categoryKey
		ORDER BY categoryKey
		ASC
	</select>

	<select id="yearSalesChart" parameterType="String"
		resultType="OrderDTO">
		SELECT *
		FROM(
		SELECT DATE_FORMAT(dt.d,'%Y-%m') AS tempDate,
		IFNULL(SUM(o.price),0) AS totalSales
		FROM dateT dt
		LEFT JOIN totalOrder o ON (DATE_FORMAT(o.rdate, '%Y-%m-%d')=dt.d) AND
		(o.status NOT LIKE 'F')
		GROUP BY tempDate
		ORDER BY tempDate ASC
		)a
		WHERE tempDate LIKE CONCAT ('%', #{year}, '%')
	</select>
	<select id="monthSalesChart" parameterType="String"
		resultType="OrderDTO">
		SELECT *
		FROM(
		SELECT DATE_FORMAT(dt.d,'%Y-%m-%d') AS tempDate,
		IFNULL(SUM(o.price),0) AS totalSales
		FROM dateT dt
		LEFT JOIN totalOrder o ON (DATE_FORMAT(o.rdate, '%Y-%m-%d')=dt.d) AND
		(o.status NOT LIKE 'F')
		GROUP BY tempDate
		ORDER BY tempDate ASC
		)a
		WHERE tempDate LIKE CONCAT ('%', '${year}-${month}', '%')
	</select>
	<select id="daySalesChart" parameterType="String"
		resultType="OrderDTO">
		SELECT *
		FROM(
		SELECT tt.t AS tempDate,
		IFNULL(SUM(o.price),0) AS totalSales
		FROM timeT tt
		LEFT JOIN totalOrder o ON (HOUR(o.rdate)=tt.t) AND DATE_FORMAT(o.rdate,
		'%y-%m-%d') LIKE '${year}-${month}-${day}' AND (o.status NOT LIKE 'F')
		GROUP BY tempDate
		ORDER BY tempDate ASC
		)a;
	</select>




	<!-- 배송량 -->
	<select id="getTotalShip" resultType="int">
		SELECT IFNULL(COUNT(distinct t.orderKey),0) AS 'status'
		FROM totalOrder t
		JOIN customer ct ON ct.custKey = t.custKey
		JOIN orderDetail od ON t.orderKey = od.orderKey
		JOIN item i ON i.itemKey = od.itemKey
		JOIN category c ON c.categoryKey = i.categoryKey
		WHERE t.rdate BETWEEN '${startDate} 00:00:00' AND '${endDate} 23:59:59'
		AND (status LIKE 'D' OR status LIKE 'S')

		<if test="categoryKey!=-1">
			AND i.categoryKey = ${categoryKey}
		</if>

		<if test="gender!='noGender'">
			AND (ct.gender=${gender1} or ct.gender=${gender2})
		</if>

		<if test="age!='noAge'">
			AND (floor((YEAR(NOW())-(if(gender='1'or
			gender='2',1900,2000)+left(jumin,2)))/10)*10='${age}')
		</if>

	</select>

	<!-- 환불처리된 상품 -->
	<select id="getTotalRefund" resultType="int">
		SELECT IFNULL(COUNT(distinct t.orderKey),0) AS "refund"
		FROM totalOrder
		t
		JOIN customer ct ON ct.custKey = t.custKey
		JOIN orderDetail od ON t.orderKey = od.orderKey
		JOIN item i ON i.itemKey = od.itemKey
		JOIN category c ON c.categoryKey = i.categoryKey
		WHERE t.rdate BETWEEN '${startDate} 00:00:00' AND '${endDate} 23:59:59'
		AND (status LIKE 'F')
		<if test="categoryKey!=-1">
			AND i.categoryKey = ${categoryKey}
		</if>

		<if test="gender!='noGender'">
			AND (ct.gender=${gender1} or ct.gender=${gender2})
		</if>

		<if test="age!='noAge'">
			AND (floor((YEAR(NOW())-(if(gender='1'or
			gender='2',1900,2000)+left(jumin,2)))/10)*10='${age}')
		</if>
	</select>


	<!-- 총판매액, 총 판매수량 -->
	<select id="getSales" resultType="OrderDTO">
		SELECT IFNULL(SUM(od.price * od.cnt),0) AS "price",
		IFNULL(SUM(od.cnt),0) AS 'totalSales'
		FROM totalOrder t
		JOIN customer ct ON ct.custKey = t.custKey
		JOIN orderDetail od ON t.orderKey = od.orderKey
		JOIN item i ON i.itemKey = od.itemKey
		JOIN category c ON c.categoryKey = i.categoryKey
		WHERE t.rdate BETWEEN '${startDate} 00:00:00' AND '${endDate} 23:59:59'
		AND (status NOT LIKE 'F')
		<if test="categoryKey!=-1">
			AND i.categoryKey = ${categoryKey}
		</if>

		<if test="gender!='noGender'">
			AND (ct.gender=${gender1} or ct.gender=${gender2})
		</if>

		<if test="age!='noAge'">
			AND (floor((YEAR(NOW())-(if(gender='1'or
			gender='2',1900,2000)+left(jumin,2)))/10)*10='${age}')
		</if>
	</select>



	<!-- 나이대별 판매개수 구하기 -->
	<select id="ageRangeSales" resultType="OrderDTO">
		SELECT SUM(od.cnt) AS totalSales,
		floor((YEAR(NOW())-(if(c.gender='1'or
		c.gender='2',1900,2000)+left(c.jumin,2)))/10)*10 AS ageRange FROM
		totalOrder t
		INNER JOIN customer c ON t.custKey=c.custKey
		INNER JOIN
		orderDetail od ON od.orderKey=t.orderKey
		INNER JOIN item i ON
		i.itemKey=od.itemKey
		WHERE (DATE_FORMAT(t.rdate,'%y-%m-%d') BETWEEN
		DATE_FORMAT('${startDate}','%y-%m-%d') AND
		DATE_FORMAT('${endDate}','%y-%m-%d'))
		AND (t.status NOT LIKE 'F')
		<if test="gender!='noGender'">
			AND (c.gender=${gender1} or c.gender=${gender2})
		</if>
		<if test="categoryKey!=-1">
			AND i.categoryKey=${categoryKey}
		</if>
		GROUP BY ageRange
		ORDER BY ageRange ASC;
	</select>

	<!-- 성별 판매량 구하기 -->
	<select id="genderSales" resultType="OrderDTO">
		SELECT SUM(od.cnt) AS totalSales, (if(c.gender='1' or
		c.gender='3','male','female')) AS gender FROM totalOrder t
		INNER JOIN
		customer c ON c.custKey=t.custKey
		INNER JOIN orderDetail od ON
		od.orderKey=t.orderKey
		INNER JOIN item i ON i.itemKey=od.itemKey
		WHERE
		(DATE_FORMAT(t.rdate,'%y-%m-%d') BETWEEN
		DATE_FORMAT('${startDate}','%y-%m-%d') AND
		DATE_FORMAT('${endDate}','%y-%m-%d'))
		AND (t.status NOT LIKE 'F')
		<if test="age!='noAge'">
			AND (floor((YEAR(NOW())-(if(gender='1'or
			gender='2',1900,2000)+left(jumin,2)))/10)*10='${age}')
		</if>
		<if test="categoryKey!=-1">
			AND i.categoryKey=${categoryKey}
		</if>
		GROUP BY gender;
	</select>

	<select id="filterdData" resultType="FilterdDTO"
		parameterType="FilterdDTO">
		SELECT
		item.categoryKey, item.name,
		sum(ordDet.price * ordDet.cnt) AS totPrice,
		ROUND(((item.price - item.sale) / item.price)*100, 0) AS salePct,
		item.sale,
		sum(ordDet.cnt) AS totCnt
		FROM orderDetail AS ordDet, 
		item,
		customer AS cust
		RIGHT OUTER JOIN totalorder totOrd
		ON (totOrd.rdate BETWEEN date(#{startDate}) AND date_add(#{endDate}, INTERVAL 1 DAY)) AND
		status NOT LIKE 'F'
		<where>
			<if test="startDate != null">
				AND ordDet.orderKey = totOrd.orderKey AND ordDet.itemKey
				= item.itemKey AND cust.custKey = totOrd.custKey
			</if>
			<if test="categoryKey != -1">
				AND (item.categoryKey = ${categoryKey})
			</if>
			<if test="age != 'noAge'">
				AND (floor((YEAR(NOW())-(if(gender='1'or gender='2',1900,2000)+left(jumin,2)))/10)*10=#{age})
			</if>
			<if test="gender != 'noGender'">
                AND (cust.gender = ${gender1} OR cust.gender = ${gender2})
            </if>
		</where>
		GROUP BY ordDet.itemKey
		ORDER BY ${align} DESC
		LIMIT 0, 10
	</select>

</mapper>